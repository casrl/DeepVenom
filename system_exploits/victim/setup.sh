#!/bin/bash

usage() {
    cat <<EOF
Usage: $0 [build|run|clean|cleanall] -MODEL [resnet18] -DATASET [cifar10] -SAVE [NAME]

A shell script that takes the following flags 

Arguments [Required]:
  build        Build project
  run          Run project
  clean        Clean build directory
  cleanall     Clean project (build, libtorch, data, conda env)

Flags [Optional]:
  -MODEL       (Use <name>.pt from .model directory) Set Model Type (default is "resnet18")
  -DATASET     (Use <name> from .data directory) Support CIFAR10 datasets (default is "cifar10")
  -SAVE        (Save model to build/<name>.pt) Provide a name (default is 'flipped')

Example usage: 
  ./setup.sh run -MODEL resnet18
EOF
}

conda_env="deepvenom"

MODEL="resnet18"
DATASET="cifar10"
TIMESTAMP=$(date +%s)
SAVEPATH=${MODEL}_${DATASET}_${TIMESTAMP}
USELIBTORCH=0

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    build | run | clean | cleanall)
        COMMAND="$key"
        shift
        ;;
    -MODEL)
        MODEL="$2"
        shift 2
        ;;
    -SAVE)
        SAVEPATH="$2"
        shift 2
        ;;
    -DATASET)
        DATASET="$2"
        shift 2
        ;;
    *)                     # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift              # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ "$COMMAND" == "" ]; then
    echo -e "\e[31mError: Must provide either 'build' or 'run' or..... command.\e[0m"
    usage
    exit
fi

compile_pytorch() {
    # prompt user if need to recomplie pytorch. if yes, continue, if no, return
    echo -e "\e[31mNeed to compile PyTorch?\e[0m"
    echo -e "\e[32m1. Yes\e[0m"
    echo -e "\e[32m2. No\e[0m"
    read -p "Enter your choice: " choice
    if [ $choice -eq 2 ]; then
        return
    fi
    
    
    export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
    if [ -d "$victimpath/pytorch" ]; then
        echo -e "\e[32mPyTorch repository already exists.\e[0m"
        cd $victimpath/pytorch
        echo -e "\e[31mCompiling PyTorch...\e[0m"
        DEBUG=1 USE_CUDA=0 python setup.py develop
        return
    fi
    echo -e "\e[31mCloning PyTorch repository...\e[0m"
    cd $victimpath
    git clone https://github.com/pytorch/pytorch
    cd $victimpath/pytorch
    git checkout v1.7.1-rc3
    git submodule update --init --recursive
    echo -e "\e[31mInstalling dependencies...\e[0m"
    conda install astunparse numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses backports

    echo -e "\e[31mFix compile issue in googletest...\e[0m"
    sed -i '58i add_compile_options(-Wno-error=maybe-uninitialized)' third_party/googletest/googletest/CMakeLists.txt

    echo -e "\e[31mCompiling googletest...\e[0m"
    cd $victimpath/pytorch/third_party/googletest/googletest/
    cmake ..
    make

    cd $victimpath/pytorch/third_party/benchmark
    git checkout 3d1c2677686718

    sed -i '5i #include <limits>' $victimpath/pytorch/third_party/benchmark/src/benchmark_register.h

    cd $victimpath/pytorch

    echo -e "\e[31mCompiling PyTorch...\e[0m"
    DEBUG=1 USE_CUDA=0 python setup.py develop
}

victimpath=$(realpath .)

if [ -f "$victimpath/.anaconda3/bin/conda" ]; then
    eval "$($victimpath/.anaconda3/bin/conda shell.bash hook)"
    conda init
fi


if [[ "$COMMAND" == "run" ]]; then
    echo -e "\e[32mSelected Model:\e[0m" $MODEL
    echo -e "\e[32mDataset to use:\e[0m" $DATASET
    echo -e "\e[32mModel will be saved in:\e[0m" ./build/$SAVEPATH.pt
elif [[ "$COMMAND" == "build" ]]; then
    echo -e "\e[32mBuilding project...\e[0m"
fi

if [[ "$COMMAND" == "clean" ]]; then
    echo -e "\e[31mClean: Removing build directory.\e[0m"
    rm -rf build
    exit 0
elif [[ "$COMMAND" == "cleanall" ]]; then
    echo -e "\e[31mCleanall: Removing build and libtorch/data, uninstalling conda env.\e[0m"
    rm -rf build
    rm -rf .libtorch
    rm -rf .data
    eval "$($victimpath/.anaconda3/bin/conda shell.bash hook)"
    conda init
    conda env remove --name $conda_env
    exit 0
elif [[ "$COMMAND" == "run" ]]; then
    if [ -f "build/deepvenom" ]; then
        echo -e "\e[32mRunning DeepVenom\e[0m"
        echo -e "\e[31mCOMMAND: \e[32m./build/deepvenom $victimpath/build/$SAVEPATH.pt $victimpath/.model/$MODEL.pt $victimpath/.data/$DATASET\e[0m"
        taskset 0x1 ./build/deepvenom $victimpath/build/$SAVEPATH.pt $victimpath/.model/$MODEL.pt $victimpath/.data/$DATASET
        # gdb --args $victimpath/build/deepvenom $victimpath/build/$SAVEPATH.pt $victimpath/.model/$MODEL.pt $victimpath/.data/$DATASET
    else
        echo -e "\e[31mDeepVenom not built. Please run \e[32m./setup.sh build\e[31m first.\e[0m"
    fi
    exit 0
elif [[ "$COMMAND" == "build" ]]; then
    if command -v conda >/dev/null 2>&1; then
        echo -e "\e[32mAnaconda is already installed.\e[0m"
    else
        echo -e "\e[31mAnaconda is not installed. Please install Anaconda and retry.\e[0m"
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "For Linux installation instructions please do the following steps:"
            echo "1. Go to https://www.anaconda.com/products/individual and click download"
            echo "2. Open the Terminal"
            echo "3. Change directories to the folder where the Anaconda installer has been saved"
            echo "4. Type bash Anaconda-latest-Linux-x86_64.sh and press Enter."
            echo "5. Answer yes whenever asked 'Do you wish the installer to prepend the Anaconda3 install location to PATH in your /home/$USER/.bashrc ?'"

            echo ""
            echo -n -e "\e[34mDo you want to automatically install Anaconda? (y/n)\e[0m"
            read answer
            if [[ $answer = y ]] || [[ $answer = yes ]]; then
                echo -e "\e[31mDownloading and installing anaconda.\e[0m"
                wget https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh -O anaconda.sh
                chmod +x anaconda.sh && ./anaconda.sh -b -p $victimpath/.anaconda3
                eval "$($victimpath/.anaconda3/bin/conda shell.bash hook)"
                conda init
                echo -e "\e[32mAnaconda installed successfully!.\e[0m"
            else
                echo -e "\e[32mAnaconda installation cancelled by user."
                echo -e "\e[31mExiting the script with error (Anaconda not installed).\e[0m"
                exit 1
            fi
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            echo "For Mac installation please go to this URL: https://docs.anaconda.com/anaconda/install/mac-os/"
            echo -e "\e[31mExiting the script with error (Anaconda not installed).\e[0m"
            exit 1
        else
            echo "For installation instructions, please go to https://docs.anaconda.com/anaconda/install/"
            echo -e "\e[31mExiting the script with error (Anaconda not installed).\e[0m"
            exit 1
        fi
    fi

    if conda env list | grep -q "\b$conda_env\b"; then
        echo -e "\e[32mAnaconda environment '$conda_env' found.\e[0m"
    else
        echo -e "\e[31mAnaconda environment '$conda_env' not found.\e[0m"
        echo -e "\e[31mCreating anaconda environment named '$conda_env'.\e[0m"
        # conda env create -f conda_env.yml --name $conda_env
        conda create --name $conda_env python=3 anaconda
    fi

    echo -e "\e[31mActivating '$conda_env' environemt.\e[0m"
    eval "$($victimpath/.anaconda3/bin/conda shell.bash hook)"
    conda init
    conda activate $conda_env

    cd $victimpath
    # if USELIBTORCH=1, then download libtorch, else use pytorch
    if [ $USELIBTORCH -eq 1 ]; then
        if [ -d ".libtorch" ]; then
            echo -e "\e[32mlibtorch already exists.\e[0m"
        else
            echo -e "\e[31mDownloading libtorch...\e[0m"
            wget https://download.pytorch.org/libtorch/nightly/cpu/libtorch-shared-with-deps-latest.zip
            unzip libtorch-shared-with-deps-latest.zip
            mv libtorch .libtorch
            rm libtorch-shared-with-deps-latest.zip
            echo -e "\e[32mlibtorch successfully downloaded.\e[0m"
        fi
        libtorchpath=$victimpath/.libtorch/share/cmake/Torch
    else
        compile_pytorch
        libtorchpath=$victimpath/pytorch/torch/share/cmake/Torch
        export LD_LIBRARY_PATH=$HOME/.anaconda3/envs/deepvenom/lib:$LD_LIBRARY_PATH
    fi

    cd $victimpath
    if [ -d ".data/cifar10" ]; then
        echo -e "\e[32mCIFAR10 data already exists.\e[0m"
    else
        echo -e "\e[31mDownloading CIFAR10 data...\e[0m"
        mkdir -p .data
        wget https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz -P .data/
        tar -xzf .data/cifar-10-binary.tar.gz -C .data/
        mv .data/cifar-10-batches-bin .data/cifar10
        rm .data/cifar-10-binary.tar.gz
        echo -e "\e[32mCIFAR10 data successfully downloaded.\e[0m"
    fi

    echo -e "\e[32mCreating build directory...\e[0m"
    cd $victimpath
    if [ ! -d "build" ]; then
        echo -e "\e[31mExecuting \e[0mmkdir build\e[0m"
        mkdir build
    fi

    echo -e "\e[31mCompiling...\e[0m"
    cd build

    echo -e "\e[31mExecuting \e[0mcmake -DCMAKE_PREFIX_PATH=$libtorchpath .."
    cd $victimpath/build
    cmake -DCMAKE_PREFIX_PATH=$libtorchpath ..
    echo -e "\e[31mExecuting \e[0mmake -j4"
    cd $victimpath/build
    make -j4
    echo -e "\e[32mCompiled successfully.\e[0m"
else
    echo -e "\e[31mInvalid argument. Please use one of the following arguments:\e[0m"
    echo -e "\e[32m./setup.sh build\e[0m # builds DeepVenom"
    echo -e "\e[32m./setup.sh run\e[0m # runs DeepVenom"
    echo -e "\e[32m./setup.sh clean\e[0m # removes build directory"
    echo -e "\e[32m./setup.sh cleanall\e[0m # removes build directory, libtorch/data and conda environment"
fi
